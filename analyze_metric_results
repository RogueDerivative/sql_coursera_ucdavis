-- analyze results

--Q1 
--GOAL: use the order_binary metric from the previous exercise,
--	for the proportion metric binary compute the following:
--		1. the count of users per treatment group for test_id = 7
--		2. the count of users with orders per treatment group

--GOAL: proportion metrics

SELECT 
	test_assignment,
	COUNT(user_id) 			  AS users,
	SUM(order_binary) 		AS orders_complteted
FROM (
	SELECT
		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment,
		MAX(CASE WHEN 
				orders.created_at > assignments.event_time 
				THEN 1 ELSE 0 END) 				
			AS order_binary
	FROM 	(
		SELECT  
			event_id,
			event_time,
			user_id,
			platform,
			MAX(CASE WHEN 
					parameter_name = 'test_id'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END) 				
				AS test_id,
			MAX(CASE WHEN 
					parameter_name = 'test_assignment'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END)
 				AS test_assignment
		FROM 
			dsv1069.events
		WHERE 
			event_name = 'test_assignment'
		GROUP BY 
			event_id,
			event_time,
			user_id
		ORDER BY
			event_id) assignments
	LEFT OUTER JOIN 
		dsv1069.orders 
	ON 
		assignments.user_id = orders.user_id 
	GROUP BY
 		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment) order_binary
WHERE 
	test_id = 7
GROUP BY
	test_assignment

---------------------------------------------------------------
--Q2.
--GOAL: create an item view binary metric
	-- for the proportion metric item_view binary compute the following:
--		1. the count of users per treatment group
--		2. the count of users with item_views per treatment group

-- the change in code from the previous example is FIRST a LEFT OUTER JOIN with the events table and the MAX commented out
-- then go back and change the MAX statement to reflect that we are looking at the number of views

SELECT 
	test_assignment,
	COUNT(user_id) 			  AS users,
	SUM(order_binary) 		AS views_binary
FROM (
	SELECT
		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment,
		MAX(CASE WHEN 
				views.event_time > assignments.event_time 
				THEN 1 ELSE 0 END) 				
			AS views_binary
	FROM 	(
		SELECT  
			event_id,
			event_time,
			user_id,
			--platform,
			MAX(CASE WHEN 
					parameter_name = 'test_id'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END) 				
				AS test_id,
			MAX(CASE WHEN 
					parameter_name = 'test_assignment'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END)
 				AS test_assignment
		FROM 
			dsv1069.events
		WHERE 
			event_name = 'test_assignment'
		GROUP BY 
			event_id,
			event_time,
			user_id
		ORDER BY
			event_id) assignments
	LEFT OUTER JOIN 
		(
		SELECT
			*
		FROM
			dsv1069.events
		WHERE
			event_name = 'view_item') views
	ON 
		assignments.user_id = orders.user_id 
	GROUP BY
 		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment) order_binary
WHERE 
	test_id = 7
GROUP BY
	test_assignment

--- the results of this table will be put into the ABBA tool ----

------------------------------------------------------------------------------------
--Q3.
-- GOAL: using the order binary from Q2: alter the metric to compute the users who viewed an item WITHIN 30 days of their treatment event. 
-- as a reminder: treatment event is when they are put into independent testing groups

-- the change in the code is simply adding a new MAX statement

SELECT 
	test_assignment,
	COUNT(user_id) 			  AS users,
	SUM(order_binary) 		AS views_binary,
	SUM(views_binary_30_days)	AS views_binary_30_days
FROM (
	SELECT
		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment,
		MAX(CASE WHEN 
				views.event_time > assignments.event_time 
				THEN 1 ELSE 0 END) 				
			AS views_binary,
		MAX(CASE WHEN 
				(views.event_time > assignments.event_time 
					AND
				DATE_PART('day', views.event_time - assignments.event_time) <= 30)
				THEN 1 ELSE 0 END) 				
			AS views_binary_30_days
	FROM 	(
		SELECT  
			event_id,
			event_time,
			user_id,
			platform,
			MAX(CASE WHEN 
					parameter_name = 'test_id'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END) 				
				AS test_id,
			MAX(CASE WHEN 
					parameter_name = 'test_assignment'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END)
 				AS test_assignment
		FROM 
			dsv1069.events
		WHERE 
			event_name = 'test_assignment'
		GROUP BY 
			event_id,
			event_time,
			user_id
		ORDER BY
			event_id) assignments
	LEFT OUTER JOIN 
		(
		SELECT
			*
		FROM
			dsv1069.events
		WHERE
			event_name = 'view_item') views
	ON 
		assignments.user_id = orders.user_id 
	GROUP BY
 		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment) order_binary
WHERE 
	test_id = 7
GROUP BY
	test_assignment
-------------------------------------------------

--Q4. using the table from "some previous exercise"
-- GOAL: for the mean value metrics of invoices, line_items, and total revenue calculate 
--- the count of users per treatment group
--- the average value of the metric per treatment group
--- the standard deviation of the metric per treatment group

SELECT
	test_id,
	test_assignment,
	COUNT(user_id) 		  AS users,
	AVG(invoices) 		  AS avaerage_invoices,
	STDDEV(invoices) 		AS stddev_invoices
FROM	(
	SELECT
		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment,
		COUNT(DISTINCT CASE WHEN 
				orders.created_at > assignments.event_time 
				THEN orders.invoice_id ELSE NULL END) 
			AS invoices,
		COUNT(DISTINCT CASE WHEN 
				orders.created_at > assignments.event_time 
				THEN orders.line_item_id ELSE NULL END) 
			AS line_items,
		COALESCE(SUM(CASE WHEN 
				orders.created_at > assignments.event_time 
				THEN orders.price ELSE 0 END),0) 
			AS total_revenue
	FROM 	(
		SELECT  
			event_id,
			event_time,
			user_id,
			platform,
			MAX(CASE WHEN 
					parameter_name = 'test_id'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END) 				
				AS test_id,
			MAX(CASE WHEN 
					parameter_name = 'test_assignment'
					THEN CAST(parameter_value AS INT)
					ELSE NULL END)
 				AS test_assignment
		FROM 
			dsv1069.events
		WHERE 
			event_name = 'test_assignment'
		GROUP BY 
			event_id,
			event_time,
			user_id
		ORDER BY
			event_id) assignments
	LEFT OUTER JOIN 
		dsv1069.orders
	ON
		assignments.user_id = orders.user_id
	GROUP BY
		assignments.user_id,
		assignments.test_id,
		assignments.test_assignment) mean_metrics
GROUP BY
	test_id
	test_assignment
ORDER BY 
	test_id
